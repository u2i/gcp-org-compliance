name: "Terraform Bootstrap (Zero Standing Privilege)"

on:
  pull_request:
    paths: 
      - "0-bootstrap/**"
      - ".github/workflows/terraform-bootstrap.yml"
  push:
    branches: [main]
    paths:
      - "0-bootstrap/**"
      - ".github/workflows/terraform-bootstrap.yml"

env:
  TF_VERSION: "1.6.0"
  TF_DIR: "0-bootstrap"

jobs:
  terraform-plan:
    name: "Terraform Plan"
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.TERRAFORM_BOOTSTRAP_SA }}

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan -detailed-exitcode -no-color -out=tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('${{ env.TF_DIR }}/tfplan.txt', 'utf8');
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < planChunks.length; i++) {
              const output = `### Terraform Plan (Part ${i + 1} of ${planChunks.length})
              
              \`\`\`
              ${planChunks[i]}
              \`\`\`
              
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.TERRAFORM_BOOTSTRAP_SA }}

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve

      - name: Output GitOps Setup
        working-directory: ${{ env.TF_DIR }}
        run: |
          echo "### GitOps Configuration" >> $GITHUB_STEP_SUMMARY
          echo "Workload Identity Provider: $(terraform output -raw workload_identity_provider)" >> $GITHUB_STEP_SUMMARY
          echo "Organization SA: $(terraform output -raw terraform_organization_sa)" >> $GITHUB_STEP_SUMMARY
          echo "Security SA: $(terraform output -raw terraform_security_sa)" >> $GITHUB_STEP_SUMMARY